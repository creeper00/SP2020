/*
 * mm-naive.c - The fastest, least memory-efficient malloc package.
 *
 * In this naive approach, a block is allocated by simply incrementing
 * the brk pointer.  A block is pure payload. There are no headers or
 * footers.  Blocks are never coalesced or reused. Realloc is
 * implemented directly using mm_malloc and mm_free.
 *
 * NOTE TO STUDENTS: Replace this header comment with your own header
 * comment that gives a high level description of your solution.
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>

#include "mm.h"
#include "memlib.h"

 /*********************************************************
  * NOTE TO STUDENTS: Before you do anything else, please
  * provide your team information in the following struct.
  ********************************************************/

  /* single word (4) or double word (8) alignment */
#define ALIGNMENT 8

/* rounds up to the nearest multiple of ALIGNMENT */
#define ALIGN(size) (((size) + (ALIGNMENT-1)) & ~0x7)

#define WSIZE 4
#define DSIZE 8
#define MINBLOCKSIZE 16

#define SIZE_T_SIZE (ALIGN(sizeof(size_t)))

#define CHUNKSIZE (1<<11)

#define MAX(x, y) ((x) > (y)? (x) : (y)) 

#define PACK(size, alloc) ((size) | (alloc)) 

#define GET(p) (*(unsigned int *)(p))
#define PUT(p, val) (*(unsigned int *)(p) = (int)(val))


#define GET_SIZE(p) (GET(p) & ~0x7)
#define GET_ALLOC(p) (GET(p) & 0x1) 

#define HDRP(bp) ((char *)(bp) - WSIZE)
#define FTRP(bp) ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE) 
#define NEXTptr(bp) ((char *)(bp)+0)
#define PREVptr(bp) ((char *)(bp)+4)

#define NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE))) 
#define PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))


static char* heap_listp;
static int rootnext;
static int mc = 0;
static char* comp;


/*void print(void) {
    int check = 1;
    void* bp = (char*)rootnext;
    while (bp != heap_listp) {
        if ((mc >= 380 && mc <= 390) || mc >= 800) {
            printf("%d ", GET_SIZE(HDRP(bp)));
            //printf("true? %d ?", GET(PREVptr(GET(bp))) == bp);
        };
        bp = (char*)GET(NEXTptr(bp));
        check++;
    }
}*/

static void* coalesce(void* bp)
{
    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
    size_t size = GET_SIZE(HDRP(bp));

    if (prev_alloc && next_alloc) return bp;
    else if (prev_alloc && !next_alloc) {
        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
        PUT(HDRP(bp), PACK(size, 0));
        PUT(FTRP(bp), PACK(size, 0));

        PUT(NEXTptr(bp), GET(NEXTptr(NEXT_BLKP(bp))));
        if (GET(NEXTptr(NEXT_BLKP(bp))) != (int)heap_listp) PUT(PREVptr(GET(NEXTptr(NEXT_BLKP(bp)))), bp);
    }
    else if (!prev_alloc && next_alloc) {
        size += GET_SIZE(HDRP(PREV_BLKP(bp)));
        PUT(FTRP(bp), PACK(size, 0));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));

        PUT(NEXTptr(PREV_BLKP(bp)), GET(NEXTptr(bp)));
        if (GET(NEXTptr(bp)) != (int)heap_listp) PUT(PREVptr(GET(NEXTptr(bp))), PREV_BLKP(bp));

        bp = PREV_BLKP(bp);
    }
    else {
        size += GET_SIZE(HDRP(PREV_BLKP(bp))) + GET_SIZE(FTRP(NEXT_BLKP(bp)));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));

        PUT(NEXTptr(PREV_BLKP(bp)), GET(NEXTptr(NEXT_BLKP(bp))));
        if (GET(NEXTptr(NEXT_BLKP(bp))) != (int)heap_listp) PUT(PREVptr(GET(NEXTptr(NEXT_BLKP(bp)))), PREV_BLKP(bp));
        bp = PREV_BLKP(bp);
    }

    return bp;
}

char* find_prev() {
    int check = 1;
    void* bp = (char*)rootnext;
    while (bp != heap_listp) {
        bp = (char*)GET(NEXTptr(bp));
        check++;
        //if (check > mc) return heap_listp;
    }
    return bp;
}
static void* extend_heap(size_t words)
{
    char* bp;
    size_t size;

    size = (words % 2) ? (words + 1) * WSIZE : words * WSIZE;
    if ((long)(bp = mem_sbrk(size)) == -1) return NULL;
    PUT(HDRP(bp), PACK(size, 0));
    PUT(FTRP(bp), PACK(size, 0));
    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1));

    char* prev = find_prev();
    PUT(NEXTptr(bp), heap_listp);  // init condi
    PUT(PREVptr(bp), prev);         // init condi
    if (prev != heap_listp) PUT(NEXTptr(prev), bp);

    char* res = coalesce(bp);
    if (rootnext == (int)heap_listp) { rootnext = (int)res; }

    return res;
}

static void* find_fit(size_t asize)
{
    int check = 1;
    void* bp = (char*)rootnext;
    while (bp != heap_listp) {
        if (!GET_ALLOC(HDRP(bp)) && GET_SIZE(HDRP(bp)) == asize) return bp;
        else if (!GET_ALLOC(HDRP(bp)) && (asize <= GET_SIZE(HDRP(bp)))) {
            if (check == 1) {
                check = 0;
                comp = bp;
                coalesce(comp);
            }
            else if (GET_SIZE(HDRP(bp)) < GET_SIZE(HDRP(comp))) {
                comp = bp;
                coalesce(comp);
            }
        }
        bp = (char*)GET(NEXTptr(bp));
    }
    if (check == 0) return comp;
    return NULL;
}

static void place(void* bp, size_t asize)
{
    size_t csize = GET_SIZE(HDRP(bp));
    if ((csize - asize) >= (2 * DSIZE))
    {
        int thisnext = GET(NEXTptr(bp));
        int thisprev = GET(PREVptr(bp));
        int curr = (int)bp;

        PUT(HDRP(bp), PACK(asize, 1));
        PUT(FTRP(bp), PACK(asize, 1));

        bp = NEXT_BLKP(bp);
        PUT(HDRP(bp), PACK(csize - asize, 0));
        PUT(FTRP(bp), PACK(csize - asize, 0));

        PUT(NEXTptr(bp), thisnext);
        PUT(PREVptr(bp), thisprev);

        if (curr == rootnext) rootnext = (int)bp;

        if (thisprev != (int)heap_listp)
            PUT(NEXTptr(thisprev), bp);

        if (thisnext != (int)heap_listp)
            PUT(PREVptr(thisnext), bp);

    }
    else
    {
        PUT(HDRP(bp), PACK(csize, 1));
        PUT(FTRP(bp), PACK(csize, 1));

        if (GET(PREVptr(bp)) != (int)heap_listp) PUT(NEXTptr(GET(PREVptr(bp))), GET(NEXTptr(bp)));
        if (GET(NEXTptr(bp)) != (int)heap_listp) PUT(PREVptr(GET(NEXTptr(bp))), GET(PREVptr(bp)));
        if (rootnext == (int)bp) rootnext = (int)GET(NEXTptr(bp));

    }


}

/*
 * mm_init - initialize the malloc package.
 */
int mm_init(void)
{
    if ((heap_listp = mem_sbrk(4 * WSIZE)) == (void*)-1) return -1;


    PUT(heap_listp, 0);
    PUT(heap_listp + (1 * WSIZE), PACK(DSIZE, 1));
    PUT(heap_listp + (2 * WSIZE), PACK(DSIZE, 1));
    PUT(heap_listp + (3 * WSIZE), PACK(0, 1));
    heap_listp += (2 * WSIZE);

    rootnext = (int)heap_listp;

    if (extend_heap(8) == NULL) return -1;

    return 0;
}

/*
 * mm_malloc - Allocate a block by incrementing the brk pointer.
 *     Always allocate a block whose size is a multiple of the alignment.
 */
void* mm_malloc(size_t size)
{
    mc++;
    size_t asize;
    size_t extendsize;
    char* bp;
    if (size == 0) return NULL;
    if (size <= DSIZE) asize = 2 * DSIZE;
    else asize = DSIZE * ((size + (DSIZE)+(DSIZE - 1)) / DSIZE);
    if ((bp = find_fit(asize)) != NULL)
    {
        place(bp, asize);
        return bp;
    }
    extendsize = MAX(asize, CHUNKSIZE);
    if ((bp = extend_heap(extendsize / WSIZE)) == NULL) return NULL;
    place(bp, asize);
    return bp;
}

/*
 * mm_free - Freeing a block does nothing.
 */
void mm_free(void* ptr)
{
    /*set size of freed block*/
    size_t size = GET_SIZE(HDRP(ptr));
    PUT(HDRP(ptr), PACK(size, 0));
    PUT(FTRP(ptr), PACK(size, 0));
    /*check for prev and next block*/
    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(ptr)));
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(ptr)));

    /*if no free block in next and prev*/
    if (prev_alloc && next_alloc)
    {
        /*when list is empty*/
        if (rootnext == (int)heap_listp) {
            PUT(NEXTptr(ptr), heap_listp);
            PUT(PREVptr(ptr), heap_listp);
            rootnext = (int)ptr;
        }
        else { //when not
            if (rootnext != (int)ptr) PUT(NEXTptr(ptr), rootnext);
            else  PUT(NEXTptr(ptr), heap_listp);
            PUT(PREVptr(ptr), heap_listp);
            if (rootnext != (int)heap_listp) PUT(PREVptr(rootnext), ptr);
            rootnext = (int)ptr;

        }
    }
    else if (!prev_alloc && next_alloc)
    {
        size += GET_SIZE(HDRP(PREV_BLKP(ptr)));
        if (GET(PREVptr(PREV_BLKP(ptr))) != (int)heap_listp) PUT(NEXTptr(GET(PREVptr(PREV_BLKP(ptr)))), GET(NEXTptr(PREV_BLKP(ptr))));
        if (GET(NEXTptr(PREV_BLKP(ptr))) != (int)heap_listp) PUT(PREVptr(GET(NEXTptr(PREV_BLKP(ptr)))), GET(PREVptr(PREV_BLKP(ptr))));

        PUT(PREVptr(PREV_BLKP(ptr)), heap_listp);
        if ((int)PREV_BLKP(ptr) != rootnext)  PUT(NEXTptr(PREV_BLKP(ptr)), rootnext);
        else PUT(NEXTptr(PREV_BLKP(ptr)), heap_listp);
        if (rootnext != (int)heap_listp) PUT(PREVptr(rootnext), PREV_BLKP(ptr));
        rootnext = (int)PREV_BLKP(ptr);

        PUT(FTRP(ptr), PACK(size, 0));
        PUT(HDRP(PREV_BLKP(ptr)), PACK(size, 0));
    }
    else if (prev_alloc && !next_alloc)
    {
        size += GET_SIZE(HDRP(NEXT_BLKP(ptr)));
        if (GET(PREVptr(NEXT_BLKP(ptr))) != (int)heap_listp) PUT(NEXTptr(GET(PREVptr(NEXT_BLKP(ptr)))), GET(NEXTptr(NEXT_BLKP(ptr))));
        if (GET(NEXTptr(NEXT_BLKP(ptr))) != (int)heap_listp) PUT(PREVptr(GET(NEXTptr(NEXT_BLKP(ptr)))), GET(PREVptr(NEXT_BLKP(ptr))));

        if (rootnext != (int)ptr && rootnext != (int)NEXT_BLKP(ptr)) PUT(NEXTptr(ptr), rootnext);
        else  PUT(NEXTptr(ptr), heap_listp);
        PUT(PREVptr(ptr), heap_listp);
        if (rootnext != (int)heap_listp && PREVptr(rootnext) != ptr && PREVptr(rootnext) != NEXT_BLKP(ptr)) PUT(PREVptr(rootnext), ptr);
        rootnext = (int)ptr;

        PUT(HDRP(ptr), PACK(size, 0));
        PUT(FTRP(ptr), PACK(size, 0));
    }
    else if (!prev_alloc && !next_alloc)
    {

        size += GET_SIZE(HDRP(PREV_BLKP(ptr))) + GET_SIZE(FTRP(NEXT_BLKP(ptr)));

        if (GET(PREVptr(PREV_BLKP(ptr))) != (int)heap_listp) PUT(NEXTptr(GET(PREVptr(PREV_BLKP(ptr)))), GET(NEXTptr(PREV_BLKP(ptr))));
        if (GET(NEXTptr(PREV_BLKP(ptr))) != (int)heap_listp) PUT(PREVptr(GET(NEXTptr(PREV_BLKP(ptr)))), GET(PREVptr(PREV_BLKP(ptr))));
        if (GET(PREVptr(NEXT_BLKP(ptr))) != (int)heap_listp) PUT(NEXTptr(GET(PREVptr(NEXT_BLKP(ptr)))), GET(NEXTptr(NEXT_BLKP(ptr))));
        if (GET(NEXTptr(NEXT_BLKP(ptr))) != (int)heap_listp) PUT(PREVptr(GET(NEXTptr(NEXT_BLKP(ptr)))), GET(PREVptr(NEXT_BLKP(ptr))));

        PUT(PREVptr(PREV_BLKP(ptr)), heap_listp);
        if ((int)PREV_BLKP(ptr) != rootnext && (int)ptr != rootnext && (int)NEXT_BLKP(ptr) != rootnext) PUT(NEXTptr(PREV_BLKP(ptr)), rootnext);
        else PUT(NEXTptr(PREV_BLKP(ptr)), heap_listp);
        if (rootnext != (int)heap_listp && PREVptr(rootnext) != PREV_BLKP(ptr) && PREVptr(rootnext) != NEXT_BLKP(ptr)) PUT(PREVptr(rootnext), PREV_BLKP(ptr));
        rootnext = (int)PREV_BLKP(ptr);

        PUT(HDRP(PREV_BLKP(ptr)), PACK(size, 0));
        PUT(FTRP(NEXT_BLKP(ptr)), PACK(size, 0));
    }
}

/*
 * mm_realloc - Implemented simply in terms of mm_malloc and mm_free
 */

void* mm_realloc(void* bp, size_t size) {
    if (size == 0) 
    {
        mm_free(bp);
        return NULL;
    }
    else 
    {
        size_t olds = GET_SIZE(HDRP(bp));
        size_t news = size + 2 * WSIZE; 
        if (news <= olds) return bp;
        else {
            size_t csize = olds + GET_SIZE(HDRP(NEXT_BLKP(bp)));
            if (!GET_ALLOC(HDRP(NEXT_BLKP(bp))) && csize >= news) {
                if (GET(PREVptr(NEXT_BLKP(bp))) != (int)heap_listp) PUT(NEXTptr(GET(PREVptr(NEXT_BLKP(bp)))), GET(NEXTptr(NEXT_BLKP(bp))));
                else rootnext = GET(NEXTptr(NEXT_BLKP(bp)));
                if (GET(NEXTptr(NEXT_BLKP(bp))) != (int)heap_listp) PUT(PREVptr(GET(NEXTptr(NEXT_BLKP(bp)))), GET(PREVptr(NEXT_BLKP(bp))));
                PUT(HDRP(bp), PACK(csize, 1));
                PUT(FTRP(bp), PACK(csize, 1));
                return bp;
            }
            else {
                void* newptr = mm_malloc(news);
                place(newptr, news);
                memcpy(newptr, bp, news);
                mm_free(bp);
                return newptr;
            }
        }
    }
}
