/*
 * mm-naive.c - The fastest, least memory-efficient malloc package.
 *
 * In this naive approach, a block is allocated by simply incrementing
 * the brk pointer.  A block is pure payload. There are no headers or
 * footers.  Blocks are never coalesced or reused. Realloc is
 * implemented directly using mm_malloc and mm_free.
 *
 * NOTE TO STUDENTS: Replace this header comment with your own header
 * comment that gives a high level description of your solution.
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>

#include "mm.h"
#include "memlib.h"

 /*********************************************************
  * NOTE TO STUDENTS: Before you do anything else, please
  * provide your team information in the following struct.
  ********************************************************/

  /* single word (4) or double word (8) alignment */
#define ALIGNMENT 8

/* rounds up to the nearest multiple of ALIGNMENT */
#define ALIGN(size) (((size) + (ALIGNMENT-1)) & ~0x7)

#define WSIZE 4
#define DSIZE 8

#define SIZE_T_SIZE (ALIGN(sizeof(size_t)))

#define CHUNKSIZE (1<<12)

#define MAX(x, y) ((x) > (y)? (x) : (y)) 

#define PACK(size, alloc) ((size) | (alloc)) 

#define GET(p) (*(unsigned int *)(p))
#define PUT(p, val) (*(unsigned int *)(p) = (int)(val))
#define PUT(p, val) (*(unsigned int *)(p) = (int)(val))

#define GET_SIZE(p) (GET(p) & ~0x7)
#define GET_ALLOC(p) (GET(p) & 0x1) 

#define HDRP(bp) ((char *)(bp) - WSIZE)
#define FTRP(bp) ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE) 
#define NEXTptr(bp) ((char *)(bp)+0)
#define PREVptr(bp) ((char *)(bp)+4)

#define GETNEXT(bp) (GET(NEXTptr(bp)))
#define GETPREV(bp) (GET(PREVptr(bp)))
#define NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE))) 
#define PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))

static void* coalesce(void* bp);
static void* extend_heap(size_t words);
static void* find_fit(size_t asize);
static void place(void* bp, size_t asize);
static void insertlist(void* bp);
static void removelist(void* bp);

static char* heap_listp = 0;
static char* rootnext = 0;
static void* comp = NULL;


static void insertlist(void* bp)
{
    if (rootnext == bp) return;
    if (rootnext == heap_listp)
    {
        PUT(NEXTptr(bp), heap_listp);
        PUT(PREVptr(bp), heap_listp);
        rootnext = bp;
    }
    else
    {
        PUT(NEXTptr(bp), rootnext);
        PUT(PREVptr(bp), heap_listp);
        PUT(PREVptr(rootnext), bp);
        rootnext = bp;
    }
}

static void removelist(void* bp)
{
    if (GETNEXT(bp) == (int)heap_listp && GETPREV(bp) == (int)heap_listp) rootnext = heap_listp;
    else if (GETNEXT(bp) == (int)heap_listp)
    {
        PUT(NEXTptr(GETPREV(bp)), heap_listp);
    }
    else if (GETPREV(bp) == (int)heap_listp)
    {
        PUT(PREVptr(GETNEXT(bp)), (int)heap_listp);
        rootnext = (char*)GETNEXT(bp);
    }
    else
    {
        PUT(NEXTptr(GETPREV(bp)), GETNEXT(bp));
        PUT(PREVptr(GETNEXT(bp)), GETPREV(bp));
    }
}

static void* coalesce(void* bp)
{
    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
    size_t size = GET_SIZE(HDRP(bp));

    if (prev_alloc && next_alloc) {
        insertlist(bp);
        return bp;
    }
    else if (prev_alloc && !next_alloc) {
        removelist(NEXT_BLKP(bp));
        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
        PUT(HDRP(bp), PACK(size, 0));
        PUT(FTRP(bp), PACK(size, 0));
    }
    else if (!prev_alloc && next_alloc) {
        removelist(PREV_BLKP(bp));
        size += GET_SIZE(HDRP(PREV_BLKP(bp)));
        bp = PREV_BLKP(bp);
        PUT(HDRP(bp), PACK(size, 0));
        PUT(FTRP(bp), PACK(size, 0));
    }
    else if (!prev_alloc && !next_alloc) {
        removelist(PREV_BLKP(bp));
        removelist(NEXT_BLKP(bp));
        size += GET_SIZE(HDRP(PREV_BLKP(bp))) + GET_SIZE(HDRP(NEXT_BLKP(bp)));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));
        bp = PREV_BLKP(bp);
    }
    insertlist(bp);
    return bp;
}

static void* extend_heap(size_t words)
{
    char* bp;
    size_t size;

    size = (words % 2) ? (words + 1) * WSIZE : words * WSIZE;
    if ((long)(bp = mem_sbrk(size)) == -1) return NULL;

    PUT(HDRP(bp), PACK(size, 0));
    PUT(FTRP(bp), PACK(size, 0));
    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1));

    return coalesce(bp);
}

static void* find_fit(size_t asize) {
    void* bp = comp;
    for (bp = rootnext; bp != heap_listp; bp = (char*)GETNEXT(bp))
    {
        if (!GET_ALLOC(HDRP(bp)) && GET_SIZE(HDRP(bp)) >= asize)
        {
            return bp;
        }
    }
    return comp = NULL;
}

static void place(void* bp, size_t asize) {
    size_t csize = GET_SIZE(HDRP(bp));

    if ((csize - asize) >= 4 * WSIZE) {
        PUT(HDRP(bp), PACK(asize, 1));
        PUT(FTRP(bp), PACK(asize, 1));
        removelist(bp);
        bp = NEXT_BLKP(bp);
        PUT(HDRP(bp), PACK(csize - asize, 0));
        PUT(FTRP(bp), PACK(csize - asize, 0));
        coalesce(bp);
    }
    else {
        PUT(HDRP(bp), PACK(csize, 1));
        PUT(FTRP(bp), PACK(csize, 1));
        removelist(bp);
    }
}

int mm_init(void)
{
    if ((heap_listp = mem_sbrk(4 * WSIZE)) == (void*)-1) return -1;

    PUT(heap_listp, 0);
    PUT(heap_listp + (1 * WSIZE), PACK(DSIZE, 1));
    PUT(heap_listp + (2 * WSIZE), PACK(DSIZE, 1));
    PUT(heap_listp + (3 * WSIZE), PACK(0, 1));
    heap_listp += (2 * WSIZE);

    rootnext = heap_listp;
    if (extend_heap(CHUNKSIZE / WSIZE) == NULL) return -1;

    return 0;
}

void* mm_malloc(size_t size)
{
    size_t asize;
    size_t extendsize;
    char* bp;

    if (size == 0) return NULL;
    if (size <= DSIZE) asize = 2 * DSIZE;
    else asize = DSIZE * ((size + (DSIZE)+(DSIZE - 1)) / DSIZE);
    if ((bp = find_fit(asize)) != NULL)
    {
        place(bp, asize);
        return bp;
    }

    extendsize = MAX(asize, CHUNKSIZE);
    if ((bp = extend_heap(extendsize / WSIZE)) == NULL) return NULL;
    place(bp, asize);
    return bp;
}

void mm_free(void* bp) {
    size_t size = GET_SIZE(HDRP(bp));
    PUT(HDRP(bp), PACK(size, 0));
    PUT(FTRP(bp), PACK(size, 0));
    coalesce(bp);
}

void* mm_realloc(void* ptr, size_t size) {
    if (ptr == NULL) return mm_malloc(size);
    if (size == 0) {
        mm_free(ptr);
        return 0;
    }
    size_t olds = GET_SIZE(HDRP(ptr));
    size_t news = size + DSIZE;
    if (news <= olds) return ptr;
    else {
        size_t checksize = olds + GET_SIZE(HDRP(NEXT_BLKP(ptr)));
        if (!GET_ALLOC(HDRP(NEXT_BLKP(ptr))) && checksize >= news)
        {
            removelist(NEXT_BLKP(ptr));
            PUT(HDRP(ptr), PACK(checksize, 1));
            PUT(FTRP(ptr), PACK(checksize, 1));
            return ptr;
        }
        else {
            void* newptr = mm_malloc(news);
            place(newptr, news);
            memcpy(newptr, ptr, news);
            mm_free(ptr);
            return newptr;
        }
    }
}
